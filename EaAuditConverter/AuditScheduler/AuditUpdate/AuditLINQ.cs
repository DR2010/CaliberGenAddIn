#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



namespace EaAuditConverter.AuditScheduler.AuditUpdate
{
    public partial class AuditTables : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertAudit(Audit instance);
        partial void UpdateAudit(Audit instance);
        partial void DeleteAudit(Audit instance);
        partial void InsertAuditdetail(Auditdetail instance);
        partial void UpdateAuditdetail(Auditdetail instance);
        partial void DeleteAuditdetail(Auditdetail instance);
        partial void InsertAuditheader(Auditheader instance);
        partial void UpdateAuditheader(Auditheader instance);
        partial void DeleteAuditheader(Auditheader instance);
        #endregion

        public AuditTables(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public AuditTables(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public AuditTables(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public AuditTables(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Audit> Audit
        {
            get
            {
                return this.GetTable<Audit>();
            }
        }

        public System.Data.Linq.Table<Auditdetail> Auditdetail
        {
            get
            {
                return this.GetTable<Auditdetail>();
            }
        }

        public System.Data.Linq.Table<Auditheader> Auditheader
        {
            get
            {
                return this.GetTable<Auditheader>();
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.audit")]
    public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Audit_header_id;

        private int _Audit_id;

        private string _Object_GUID;

        private string _Object_type;

        private string _Audit_user;

        private System.DateTime _Audit_datetime;

        private string _Ea_object_type;

        private string _Change_type;

        private string _Object_name;

        private EntityRef<Auditheader> _Auditheader;

        private EntitySet<Auditdetail> _Auditdetail;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAudit_header_idChanging(int value);
        partial void OnAudit_header_idChanged();
        partial void OnAudit_idChanging(int value);
        partial void OnAudit_idChanged();
        partial void OnObject_GUIDChanging(string value);
        partial void OnObject_GUIDChanged();
        partial void OnObject_typeChanging(string value);
        partial void OnObject_typeChanged();
        partial void OnAudit_userChanging(string value);
        partial void OnAudit_userChanged();
        partial void OnAudit_datetimeChanging(System.DateTime value);
        partial void OnAudit_datetimeChanged();
        partial void OnEa_object_typeChanging(string value);
        partial void OnEa_object_typeChanged();
        partial void OnChange_typeChanging(string value);
        partial void OnChange_typeChanged();
        partial void OnObject_nameChanging(string value);
        partial void OnObject_nameChanged();
        #endregion

        public Audit()
        {
            this._Auditheader = default(EntityRef<Auditheader>);
            this._Auditdetail = new EntitySet<Auditdetail>(new Action<Auditdetail>(this.attach_Auditdetail), new Action<Auditdetail>(this.detach_Auditdetail));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_header_id", Storage = "_Audit_header_id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Audit_header_id
        {
            get
            {
                return this._Audit_header_id;
            }
            set
            {
                if ((this._Audit_header_id != value))
                {
                    this.OnAudit_header_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_header_id = value;
                    this.SendPropertyChanged("Audit_header_id");
                    this.OnAudit_header_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_id", Storage = "_Audit_id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Audit_id
        {
            get
            {
                return this._Audit_id;
            }
            set
            {
                if ((this._Audit_id != value))
                {
                    this.OnAudit_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_id = value;
                    this.SendPropertyChanged("Audit_id");
                    this.OnAudit_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "object_GUID", Storage = "_Object_GUID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Object_GUID
        {
            get
            {
                return this._Object_GUID;
            }
            set
            {
                if ((this._Object_GUID != value))
                {
                    this.OnObject_GUIDChanging(value);
                    this.SendPropertyChanging();
                    this._Object_GUID = value;
                    this.SendPropertyChanged("Object_GUID");
                    this.OnObject_GUIDChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "object_type", Storage = "_Object_type", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Object_type
        {
            get
            {
                return this._Object_type;
            }
            set
            {
                if ((this._Object_type != value))
                {
                    this.OnObject_typeChanging(value);
                    this.SendPropertyChanging();
                    this._Object_type = value;
                    this.SendPropertyChanged("Object_type");
                    this.OnObject_typeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_user", Storage = "_Audit_user", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Audit_user
        {
            get
            {
                return this._Audit_user;
            }
            set
            {
                if ((this._Audit_user != value))
                {
                    this.OnAudit_userChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_user = value;
                    this.SendPropertyChanged("Audit_user");
                    this.OnAudit_userChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_datetime", Storage = "_Audit_datetime", DbType = "DateTime NOT NULL")]
        public System.DateTime Audit_datetime
        {
            get
            {
                return this._Audit_datetime;
            }
            set
            {
                if ((this._Audit_datetime != value))
                {
                    this.OnAudit_datetimeChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_datetime = value;
                    this.SendPropertyChanged("Audit_datetime");
                    this.OnAudit_datetimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "ea_object_type", Storage = "_Ea_object_type", DbType = "NVarChar(20)")]
        public string Ea_object_type
        {
            get
            {
                return this._Ea_object_type;
            }
            set
            {
                if ((this._Ea_object_type != value))
                {
                    this.OnEa_object_typeChanging(value);
                    this.SendPropertyChanging();
                    this._Ea_object_type = value;
                    this.SendPropertyChanged("Ea_object_type");
                    this.OnEa_object_typeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "change_type", Storage = "_Change_type", DbType = "NVarChar(10)")]
        public string Change_type
        {
            get
            {
                return this._Change_type;
            }
            set
            {
                if ((this._Change_type != value))
                {
                    this.OnChange_typeChanging(value);
                    this.SendPropertyChanging();
                    this._Change_type = value;
                    this.SendPropertyChanged("Change_type");
                    this.OnChange_typeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "object_name", Storage = "_Object_name", DbType = "NVarChar(50)")]
        public string Object_name
        {
            get
            {
                return this._Object_name;
            }
            set
            {
                if ((this._Object_name != value))
                {
                    this.OnObject_nameChanging(value);
                    this.SendPropertyChanging();
                    this._Object_name = value;
                    this.SendPropertyChanged("Object_name");
                    this.OnObject_nameChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_audit_auditheader", Storage = "_Auditheader", ThisKey = "Audit_header_id", OtherKey = "Audit_header_id", IsForeignKey = true)]
        public Auditheader Auditheader
        {
            get
            {
                return this._Auditheader.Entity;
            }
            set
            {
                Auditheader previousValue = this._Auditheader.Entity;
                if (((previousValue != value)
                            || (this._Auditheader.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Auditheader.Entity = null;
                        previousValue.Audit.Remove(this);
                    }
                    this._Auditheader.Entity = value;
                    if ((value != null))
                    {
                        value.Audit.Add(this);
                        this._Audit_header_id = value.Audit_header_id;
                    }
                    else
                    {
                        this._Audit_header_id = default(int);
                    }
                    this.SendPropertyChanged("Auditheader");
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_auditdetail_audit", Storage = "_Auditdetail", ThisKey = "Audit_header_id,Audit_id", OtherKey = "Audit_header_id,Audit_id", DeleteRule = "NO ACTION")]
        public EntitySet<Auditdetail> Auditdetail
        {
            get
            {
                return this._Auditdetail;
            }
            set
            {
                this._Auditdetail.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Auditdetail(Auditdetail entity)
        {
            this.SendPropertyChanging();
            entity.Audit = this;
        }

        private void detach_Auditdetail(Auditdetail entity)
        {
            this.SendPropertyChanging();
            entity.Audit = null;
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.auditdetail")]
    public partial class Auditdetail : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Audit_header_id;

        private int _Audit_id;

        private int _Audit_detail_id;

        private string _Property;

        private string _Old_value;

        private string _New_value;

        private EntityRef<Audit> _Audit;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAudit_header_idChanging(int value);
        partial void OnAudit_header_idChanged();
        partial void OnAudit_idChanging(int value);
        partial void OnAudit_idChanged();
        partial void OnAudit_detail_idChanging(int value);
        partial void OnAudit_detail_idChanged();
        partial void OnPropertyChanging(string value);
        partial void OnPropertyChanged();
        partial void OnOld_valueChanging(string value);
        partial void OnOld_valueChanged();
        partial void OnNew_valueChanging(string value);
        partial void OnNew_valueChanged();
        #endregion

        public Auditdetail()
        {
            this._Audit = default(EntityRef<Audit>);
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_header_id", Storage = "_Audit_header_id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Audit_header_id
        {
            get
            {
                return this._Audit_header_id;
            }
            set
            {
                if ((this._Audit_header_id != value))
                {
                    this.OnAudit_header_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_header_id = value;
                    this.SendPropertyChanged("Audit_header_id");
                    this.OnAudit_header_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_id", Storage = "_Audit_id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Audit_id
        {
            get
            {
                return this._Audit_id;
            }
            set
            {
                if ((this._Audit_id != value))
                {
                    this.OnAudit_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_id = value;
                    this.SendPropertyChanged("Audit_id");
                    this.OnAudit_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_detail_id", Storage = "_Audit_detail_id", DbType = "Int NOT NULL", IsPrimaryKey = true)]
        public int Audit_detail_id
        {
            get
            {
                return this._Audit_detail_id;
            }
            set
            {
                if ((this._Audit_detail_id != value))
                {
                    this.OnAudit_detail_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_detail_id = value;
                    this.SendPropertyChanged("Audit_detail_id");
                    this.OnAudit_detail_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "property", Storage = "_Property", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Property
        {
            get
            {
                return this._Property;
            }
            set
            {
                if ((this._Property != value))
                {
                    this.OnPropertyChanging(value);
                    this.SendPropertyChanging();
                    this._Property = value;
                    this.SendPropertyChanged("Property");
                    this.OnPropertyChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "old_value", Storage = "_Old_value", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        public string Old_value
        {
            get
            {
                return this._Old_value;
            }
            set
            {
                if ((this._Old_value != value))
                {
                    this.OnOld_valueChanging(value);
                    this.SendPropertyChanging();
                    this._Old_value = value;
                    this.SendPropertyChanged("Old_value");
                    this.OnOld_valueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "new_value", Storage = "_New_value", DbType = "NVarChar(MAX) NOT NULL", CanBeNull = false, UpdateCheck = UpdateCheck.Never)]
        public string New_value
        {
            get
            {
                return this._New_value;
            }
            set
            {
                if ((this._New_value != value))
                {
                    this.OnNew_valueChanging(value);
                    this.SendPropertyChanging();
                    this._New_value = value;
                    this.SendPropertyChanged("New_value");
                    this.OnNew_valueChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_auditdetail_audit", Storage = "_Audit", ThisKey = "Audit_header_id,Audit_id", OtherKey = "Audit_header_id,Audit_id", IsForeignKey = true)]
        public Audit Audit
        {
            get
            {
                return this._Audit.Entity;
            }
            set
            {
                Audit previousValue = this._Audit.Entity;
                if (((previousValue != value)
                            || (this._Audit.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Audit.Entity = null;
                        previousValue.Auditdetail.Remove(this);
                    }
                    this._Audit.Entity = value;
                    if ((value != null))
                    {
                        value.Auditdetail.Add(this);
                        this._Audit_header_id = value.Audit_header_id;
                        this._Audit_id = value.Audit_id;
                    }
                    else
                    {
                        this._Audit_header_id = default(int);
                        this._Audit_id = default(int);
                    }
                    this.SendPropertyChanged("Audit");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.auditheader")]
    public partial class Auditheader : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _Audit_header_id;

        private System.Nullable<int> _PositionFrom;

        private string _Status;

        private System.Nullable<System.DateTime> _ImportDateTime;

        private string _ImportUser;

        private EntitySet<Audit> _Audit;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnAudit_header_idChanging(int value);
        partial void OnAudit_header_idChanged();
        partial void OnPositionFromChanging(System.Nullable<int> value);
        partial void OnPositionFromChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnImportDateTimeChanging(System.Nullable<System.DateTime> value);
        partial void OnImportDateTimeChanged();
        partial void OnImportUserChanging(string value);
        partial void OnImportUserChanged();
        #endregion

        public Auditheader()
        {
            this._Audit = new EntitySet<Audit>(new Action<Audit>(this.attach_Audit), new Action<Audit>(this.detach_Audit));
            OnCreated();
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Name = "audit_header_id", Storage = "_Audit_header_id", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int Audit_header_id
        {
            get
            {
                return this._Audit_header_id;
            }
            set
            {
                if ((this._Audit_header_id != value))
                {
                    this.OnAudit_header_idChanging(value);
                    this.SendPropertyChanging();
                    this._Audit_header_id = value;
                    this.SendPropertyChanged("Audit_header_id");
                    this.OnAudit_header_idChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PositionFrom", DbType = "Int")]
        public System.Nullable<int> PositionFrom
        {
            get
            {
                return this._PositionFrom;
            }
            set
            {
                if ((this._PositionFrom != value))
                {
                    this.OnPositionFromChanging(value);
                    this.SendPropertyChanging();
                    this._PositionFrom = value;
                    this.SendPropertyChanged("PositionFrom");
                    this.OnPositionFromChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Status", DbType = "NVarChar(50)")]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if ((this._Status != value))
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ImportDateTime", DbType = "DateTime")]
        public System.Nullable<System.DateTime> ImportDateTime
        {
            get
            {
                return this._ImportDateTime;
            }
            set
            {
                if ((this._ImportDateTime != value))
                {
                    this.OnImportDateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ImportDateTime = value;
                    this.SendPropertyChanged("ImportDateTime");
                    this.OnImportDateTimeChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ImportUser", DbType = "NVarChar(50)")]
        public string ImportUser
        {
            get
            {
                return this._ImportUser;
            }
            set
            {
                if ((this._ImportUser != value))
                {
                    this.OnImportUserChanging(value);
                    this.SendPropertyChanging();
                    this._ImportUser = value;
                    this.SendPropertyChanged("ImportUser");
                    this.OnImportUserChanged();
                }
            }
        }

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "FK_audit_auditheader", Storage = "_Audit", ThisKey = "Audit_header_id", OtherKey = "Audit_header_id", DeleteRule = "NO ACTION")]
        public EntitySet<Audit> Audit
        {
            get
            {
                return this._Audit;
            }
            set
            {
                this._Audit.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Audit(Audit entity)
        {
            this.SendPropertyChanging();
            entity.Auditheader = this;
        }

        private void detach_Audit(Audit entity)
        {
            this.SendPropertyChanging();
            entity.Auditheader = null;
        }
    }
#pragma warning restore 1591
}