///////////////////////////////////////////////////////////
//  Release.cs
//  Implementation of the Class Release
//  Generated by Enterprise Architect
//  Created on:      11-Nov-2009 16:49:03
//  Original author: Colin Richardson
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Linq;
using EA;

namespace EAAddIn.Applications.DatabaseReleaseManager {
    public class Release : ModelBase
    {
        public Release()
        {
            Mode = EditMode.Add;
        }
        public string Name
        {
            get; set;
        }

        public DateTime ReleaseDate{
            get;
            set;
        }

        public string Stream{
            get;
            set;
        }

        public string FullName
        {
            get
            {
                var stream = string.IsNullOrEmpty(Stream)
                                 ? "Release"
                                 : Stream;
                return (string.IsNullOrEmpty(Name) ? DeriveName() : Name) + " (" + stream + ")";
            }
        }

        public Release OldValue
        {
            get
            {
                if (oldValue == null)
                    oldValue = new Release(); 
                
                return oldValue;
            }
            set
            {
                if (oldValue == null)
                    oldValue = new Release();

                oldValue.Name = value.Name;
                oldValue.ReleaseDate = value.ReleaseDate;
                oldValue.Stream = value.Stream;
            }
        }

        private Release oldValue;




        public List<Release> List()
        {
            return new EaAccess().ListReleases();
        }
        //public List<ReleaseInfo> ListNames()
        //{
        //    return new EaAccess().ListReleases();
        //}

        public void Reset()
        {
            Name = string.Empty;
            ReleaseDate = DateTime.Now;
            Stream = ReleaseStream.Release;

        }

        public Release Read(){

			return null;
		}


        public List<Message> Delete()
        {

            var messages = ValidateOkToDelete();

            if (messages.Count == 0)
            {

                if (new EaAccess().DeleteRelease(Name, ReleaseDate.ToString("dd/MM/yyyy")))
                {
                    messages = new Stereotype().DeleteDatabaseStereotypes(Name);
                }
            }
            return messages;
		}

        public List<Message> Save()
        {
            Package releasePackage = null;
            var guid = string.Empty;

            var messages = ValidateOkToSave(ref releasePackage, ref guid);

            if (messages.Count == 0)
            {
                if (Mode == EditMode.Add)
                {
                    var releaseClass = (EA.Element) releasePackage.Elements.AddNew(Name, "Class");

                    releaseClass.Stereotype = "release";

                    if (releaseClass.Update())
                    {
                        // add to Current Project Releases diagram
                        Diagram releaseDiagram = null;

                        foreach (Diagram diagram in releasePackage.Diagrams)
                        {
                            if (diagram.Name == "Current Project Releases")
                            {
                                releaseDiagram = diagram;
                            }
                        }

                        if (releaseDiagram != null)
                        {

                            object objElement = releaseDiagram.DiagramObjects.AddNew("", "");
                            var diagObject = (DiagramObject) objElement;

                            diagObject.ElementID = releaseClass.ElementID;
                            diagObject.Update();

                            Diagram currentDiagram = AddInRepository.Instance.Repository.GetCurrentDiagram();

                            if (currentDiagram != null && currentDiagram.DiagramID == releaseDiagram.DiagramID)
                            {
                                currentDiagram.DiagramObjects.Refresh();
                                currentDiagram.Update();
                                AddInRepository.Instance.Repository.SaveDiagram(currentDiagram.DiagramID);
                                AddInRepository.Instance.Repository.ReloadDiagram(currentDiagram.DiagramID);

                            }
                        }
                    //

                        messages.AddRange(UpdateDetails(releaseClass.ElementGUID));

                        if (messages.Count == 0)
                        {
                            Mode = EditMode.Update;
                        }

                        // Cteate the stereotypes

                        messages.AddRange(new Stereotype().CreateDatabaseStereotypes(Name));
                    }
                    else
                    {
                        messages.Add(new ErrorMessage("Unknown error saving release to EA. New release not saved."));
                    }
                }
                else if (Mode == EditMode.Update)
                {
                    if (Name != OldValue.Name)
                    {
                        var stereotype = new Stereotype();
                        var deleteStereotypeMessages = stereotype.DeleteDatabaseStereotypes(OldValue.Name);

                        if (deleteStereotypeMessages.Any(x => x.Type == "Error"))
                        {
                            messages.AddRange(deleteStereotypeMessages);
                        }
                        else
                        {
                            var EaElement = AddInRepository.Instance.Repository.GetElementByGuid(guid);
                            EaElement.Name = Name;
                            if (!EaElement.Update())
                            {
                                messages.Add(new ErrorMessage("Unknown error updating release name. Name not changed."));
                            }
                            else
                            {
                                if (deleteStereotypeMessages.Any(x => x.Type == "Information"))
                                {
                                    var createStereotpyeMessages = stereotype.CreateDatabaseStereotypes(Name);

                                    if (createStereotpyeMessages.Any(x => x.Type == "Error"))
                                    {
                                        messages.AddRange(createStereotpyeMessages);
                                    }
                                    else
                                    {
                                        messages.Add(
                                            new InformationMessage(
                                                "Release stereotypes have been deleted and re-created.  Please re-start Enterprise Architect to take affect."));
                                    }
                                }
                            }
                        }

                    }
                    messages.AddRange(UpdateDetails(guid));
                }
                else
                {
                    messages.Add(
                        new ErrorMessage("Release is in use and is currently read only. Unable to save changes."));
                }
            }
            return messages;
        }

        private string DeriveName()
        {
            return ReleaseDate.ToString("MMM yyyy");
        }

        /// <summary>
		/// Checks that no database stereotypes exist for this release
		/// </summary>
		public List<Message> ValidateOkToDelete()
        {
            return CheckReleaseStereotypeUsage();
        }

        internal List<Message> CheckReleaseStereotypeUsage()
        {
            var messages = new List<Message>();

            foreach (var strings in new Element().ListContainingStereotype(Name))
            {
                messages.Add(new ErrorMessage( "Release stereotype is used by table '" + strings[1] + "'"){Tag = AddInRepository.Instance.Repository.GetElementByGuid(strings[0]) });
            }

            foreach (var strings in new Attribute().ListContainingStereotype(Name))
            {
                messages.Add(new ErrorMessage("Release stereotype is used by table '" + strings[2] + "' in column '" + strings[1] + 
                                              "'"){ Tag = AddInRepository.Instance.Repository.GetAttributeByGuid(strings[0]) });
            }
            return messages;
        }

        public List<Message> ValidateOkToSave(ref Package masterReleasePackage, ref string guid)
        {
            var messages = new List<Message>();

            if (string.IsNullOrEmpty(Name))
            {
                Name = DeriveName();
            }

            var name = (Mode == EditMode.Add ? Name : OldValue.Name);

            guid = new EaAccess().GetReleaseGuid(name, ReleaseDate.ToString("dd/MM/yyyy"));

            if (Mode == EditMode.ReadOnly)
            {
                messages.Add(
                    new ErrorMessage("Release is in use and is currently read only. Changes to release not saved."));
            }
            else if (Mode == EditMode.Add)
            {
                if (!string.IsNullOrEmpty(guid))
                {
                    messages.Add(new ErrorMessage("Record exists. New release not saved."));
                }
                else
                {

                    masterReleasePackage = new EaAccess().GetMasterReleasePackage();

                    if (masterReleasePackage == null)
                    {
                        messages.Add(new ErrorMessage("Cannot find 'Master Release' package. New release not saved."));
                    }
                }

            }
            else
            {
                if (string.IsNullOrEmpty(guid))
                {
                    messages.Add(new ErrorMessage("Unable to find release with this name. Changes to release not saved."));
                }
                else
                {
                    messages.AddRange(CheckReleaseStereotypeUsage());
                }
            }
            return messages;
		}



        internal bool IsChangedFromOriginalValue()
        {
            return
                OldValue.Name != Name ||
                OldValue.ReleaseDate.CompareTo(ReleaseDate) != 0 ||
                OldValue.Stream != Stream;
        }

        internal void SaveOriginalValue()
        {
            OldValue.Name = Name;
            OldValue.ReleaseDate = ReleaseDate;
            OldValue.Stream = Stream;
        }
        internal void RestoreOriginalValue()
        {
            Name = OldValue.Name;
            ReleaseDate = OldValue.ReleaseDate;
            Stream = OldValue.Stream;
        }

        private List<Message> UpdateDetails(string guid)
        {
            var messages = new List<Message>();

            EA.Element element = AddInRepository.Instance.Repository.GetElementByGuid(guid);

            if (element == null)
            {
                messages.Add(new ErrorMessage("Unable to find element with guid " + guid));
            }
            else
            {

                SaveReleaseTaggedValue(element, "Release Date", ReleaseDate.ToString("dd/MM/yyyy"));
                SaveReleaseTaggedValue(element, "Stream", Stream);
                element.TaggedValues.Refresh();
            }
            return messages;
        }

        private static void SaveReleaseTaggedValue(IDualElement element, string tag, string tagValue)
        {
            var taggedValue = (TaggedValue) element.TaggedValues.GetByName(tag);

            if (taggedValue == null)
            {
                taggedValue = (TaggedValue) element.TaggedValues.AddNew(tag, tagValue);
            }
            else
            {
                taggedValue.Value = tagValue;
            }
            taggedValue.Update();

        }

        internal bool Used()
        {
            return (new EaAccess().GetReleaseStereotypeUsageCount(Name) > 0);
        }

        public StereotypeStatus CompareReleaseStereotype(string stereotypeList)
        {
            var defaults = new DefaultStereotypes();

            var stereotype = GetNonstandardStereotype(stereotypeList);

            if (stereotype == null) return StereotypeStatus.MultipleStereotypesFound;

            if (stereotype == string.Empty) return StereotypeStatus.NotReleaseStereotype;

            foreach (var defaultStereotype in defaults.Defaults)
            {
                stereotype = stereotype.Replace(defaultStereotype, string.Empty).TrimStart();
            }

            DateTime? date = new EaAccess().GetReleaseDate(stereotype);

            if (date == null)
            {
                return StereotypeStatus.ReleaseNotFound;
            }
            if (date > ReleaseDate)
            {
                return StereotypeStatus.FutureRelease;
            }
            if (date == ReleaseDate)
            {
                return StereotypeStatus.CurrentRelease;
            }
            return StereotypeStatus.PastRelease;
        }

        public static string GetNonstandardStereotype(string stereotypeList )
        {
            var defaults = new DefaultStereotypes();

            var stereotypes = stereotypeList.Split(',');

            var nonstandardStereotypes = from s in stereotypes
                                         where !defaults.BaseStereotypes.Contains(s)
                                         select s;

            if (nonstandardStereotypes.Count() == 0) return string.Empty;
            if (nonstandardStereotypes.Count() != 1) return null;

            return nonstandardStereotypes.First();
        }
    }//end Release

    public enum StereotypeStatus {
        ReleaseNotFound,
        FutureRelease,
        PastRelease,
        CurrentRelease,
        NotReleaseStereotype,
        MultipleStereotypesFound
    }

}//end namespace DatabaseReleaseManager