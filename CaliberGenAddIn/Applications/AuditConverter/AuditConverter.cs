///////////////////////////////////////////////////////////
//  AuditControl.cs
//  Implementation of the Class AuditControl
//  Generated by Enterprise Architect
//  Created on:      15-Jul-2010 15:23:46
//  Original author: Wayne Lombard
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;
using System.Xml;
using EA;
using EAAddIn.Applications.AuditConverter.AuditUpdate;

namespace EAAddIn.Applications.AuditConverter

{
    public class AuditConverter
    {


        /// <summary>
        /// Set up file names, set up to date, validate file paths, confirm file overwrite
        /// if file(s) already exists
        /// </summary>
        public bool SaveAudit                { get; private set; }
        public bool ClearAudit               { get; private set; }
        public bool IncludeFromDate          { get; private set; }
        public DateTime FromDate             { get; private set; }
        public DateTime ToDate               { get; private set; }
        public string SaveAuditFileFullName  { get; private set; }
        public string SaveAuditFilePath      { get; private set; }
        public Repository Repository         { get; private set; }
        public string ResultsFileName        { get; private set; }

        #region Custom Methods

        public void InitialaseExtract()
        {
            FromDate = DateTime.Today.AddDays(-7); //sets the time to 00:00:00
            ToDate = DateTime.Today; // DateTime.Today; //sets the time to 00:00:00 why doesn't this work!
            SaveAudit = true;
            ClearAudit = true;
            IncludeFromDate = false;
            SaveAuditFilePath = Path.GetTempPath();

            SaveAuditFileFullName = Path.Combine(SaveAuditFilePath, Createfilename(FromDate, ToDate, IncludeFromDate));
            Repository = AddInRepository.Instance.Repository;
            ResultsFileName = Path.Combine(SaveAuditFilePath, "auditlog.txt");
        }

        public static string Createfilename(DateTime fromDate, DateTime toDate, bool includeFromDate)
        {
            if (includeFromDate)
            {
                return NameFormat(fromDate) + "_To_" + NameFormat(toDate) + ".xml";
            }
            return "Until_" + NameFormat(toDate) + ".xml";
        }

        private static string NameFormat(DateTime inDate)
        {
            return inDate.ToString("dd_MMM_yy_HHmm");
        }

        #endregion

        #region Load and Extract Audit Logs From EA

        public void ExtractAuditLogs(ref List<Message> messages)
        {
            InitialaseExtract();
            ExtractAuditLogs(SaveAuditFileFullName, null, ToDate, ref messages);
        }

        public static bool ExtractAuditLogs(string saveAuditFileTo, DateTime? fromDate, DateTime toDate, ref List<Message> messages)
        {
            //return Snapshot.SaveAuditLogs(saveAuditFileTo, fromDate, toDate);

            var saveOk = AddInRepository.Instance.Repository.SaveAuditLogs(saveAuditFileTo, fromDate.HasValue ? fromDate.Value : new object(), toDate);

            if (saveOk)
            {
                messages.Add(new InformationMessage("Audit logs saved successfully"));
                System.IO.File.SetCreationTime(saveAuditFileTo, (toDate > DateTime.Now) ? DateTime.Now : toDate);
            }
            else
            {
                messages.Add(new ErrorMessage("Error extracting audit logs " + AddInRepository.Instance.Repository.ConnectionString));

            }
            return saveOk;
        }

        public static bool ClearAuditLogs(DateTime? fromDate, DateTime toDate, ref List<Message> messages)
        {
            //if (selectedRepository == null)
            //{
            //    messages.Add(new ErrorMessage(@"EA repository not supplied"));
            //    return false;
            //}
            //return Snapshot.ClearAuditLogs(selectedRepository, fromDate, toDate);

            return AddInRepository.Instance.Repository.ClearAuditLogs(fromDate.HasValue ? fromDate.Value : DateTime.MinValue, toDate);
        }

        #endregion

        #region Read in XML Audit log and convert it 

        public static bool ConvertAndSaveLogToDb(string filename, Action<string> updateStatus, ref List<Message> messages, DateTime auditDateTime, Action<int,int> updateProgress)
        {
            bool ok = true;
            var processed = 0;

            if (filename == null)
            {
                messages.Add(new ErrorMessage(@"File to convert not passed in"));
                return false;
            }

            var totalRecords = 0;
            
            if (updateStatus != null || updateProgress != null)
            {
                totalRecords = GetRowCount(filename, updateStatus);
            }

            var sw = Stopwatch.StartNew();
            sw.Start();

            // Insert the audit header DB record
            string auditConnectionString = AddInRepository.Instance.ConnectionStringSql;
            var db = new AuditTables(auditConnectionString);

            var linqAuditHeader = new Auditheader
                                      {
                                          OriginalFileName = filename,
                                          ImportDateTime = DateTime.Now,
                                          ArchivedUpTo = auditDateTime,
                                          Status = "in progress",
                                          ImportUser = WindowsIdentity.GetCurrent().Name.Split('\\')[1]
                                      };

            db.Auditheader.InsertOnSubmit(linqAuditHeader);
            try
            {
                db.SubmitChanges();
            }
            catch (Exception ex)
            {
                ok = false;
                messages.Add(new ErrorMessage("Error inserting audit header: " + ex.Message));
            }

            if (ok)
            {
                var settings = new XmlReaderSettings
                                   {
                                       ConformanceLevel = ConformanceLevel.Fragment,
                                       IgnoreWhitespace = true,
                                       IgnoreComments = true
                                   };

                // insert the audit header here
                XmlReader reader = XmlReader.Create(filename, settings);

                while (ok && reader.Read())
                {
                    if (reader.IsStartElement() && reader.Name == "Row")
                    {
                        processed++;
                        if (processed%100 == 0)
                        {

                            if (updateProgress != null)
                            {
                                updateProgress(processed, totalRecords);
                            }

                            if (updateStatus != null)
                            {
                                updateStatus(processed + " of " + totalRecords + " records pre-processed...");
                            }
                        }
                        ok = ProcessAuditRow(reader, linqAuditHeader.Audit_header_id, db);
                    }
                }

                if (updateStatus != null)
                    updateStatus("Performing bulk insert...");

                try
                {
                    db.SubmitChanges();

                    string errorMessage = string.Empty;
                    ok = UpdateAuditHeaderStatus(linqAuditHeader.Audit_header_id, "successful", ref errorMessage);
                }
                catch (Exception ex)
                {
                    messages.Add(new ErrorMessage("Error inserting audit records: " + ex.Message + ", inner message:" + ex.InnerException.Message));
 
                    string errorMessage = string.Empty;
                    UpdateAuditHeaderStatus(linqAuditHeader.Audit_header_id, "error", ref errorMessage);
 
                    ok = false;
                }
            }
            sw.Stop();

            if (updateProgress != null)
            {
                updateProgress(int.MaxValue, totalRecords);
            }

            if (ok)
            {
                messages.Add(new InformationMessage(string.Format("{0} records inserted in {1} hours, {2} minutes, {3} seconds from file {4} on {5}.", processed,
                                 sw.Elapsed.Hours,sw.Elapsed.Minutes,sw.Elapsed.Seconds, filename, DateTime.Now)));
            }
            return ok;
        }

        private static bool UpdateAuditHeaderStatus(int auditHeaderId, string status, ref string error)
        {
            bool updated = false;

            using (var connection = new SqlConnection(AddInRepository.Instance.ConnectionStringSql))
            {
                connection.Open();

                SqlCommand command = connection.CreateCommand();
                command.CommandText = string.Format(
                    "UPDATE auditheader" +
                    "   SET [status] = '{0}' " +
                    "   WHERE  audit_header_id = {1}",status, auditHeaderId);

                try
                {
                    updated = command.ExecuteNonQuery() > 0;
                }
                catch (SqlException ex)
                {
                   error = ex.ToString();
                   updated = false;
                }

            }
            return updated;
        }

        public static int GetRowCount(string filename, Action<string> updateStatus)
        {
            var settings = new XmlReaderSettings
            {
                ConformanceLevel = ConformanceLevel.Fragment,
                IgnoreWhitespace = true,
                IgnoreComments = true
            };

            var reader = XmlReader.Create(filename, settings);
            
            var processed = 0;

            while (reader.Read())
            {
                if (!reader.IsStartElement() || reader.Name != "Row") continue;
                
                processed++;
                if (processed%1000 == 0)
                {
                    updateStatus(processed + " rows found...");
                }
            }
            if (updateStatus != null)
                updateStatus(processed + " rows found...");

            return processed;
        }

        private static bool ProcessAuditRow(XmlReader reader, int headerId, AuditTables db)
        {
            bool ok = true;
            bool process = true;
            string nodeName = string.Empty;
            string snapshotId = string.Empty;
            string seriesId = string.Empty;
            int position = 0;
            string snapshotName = string.Empty;
            string notes = string.Empty;
            string style = string.Empty;
            string elementId = string.Empty;
            string elementType = string.Empty;
            string binContent1 = string.Empty;
            string binContent2 = string.Empty;
            
            try
            {
                while (process && reader.Read())
                {
                    if (reader.IsStartElement())
                    {
                        nodeName = reader.Name;

                        if (reader.Read())
                        {
                            var value = reader.ReadContentAsString();

                            switch (nodeName)
                            {
                                case "SnapshotID":
                                    snapshotId = value;
                                    break;
                                case "SeriesID":
                                    seriesId = value;
                                    break;
                                case "Position":
                                    int.TryParse(value, out position);
                                    break;
                                case "SnapshotName":
                                    snapshotName = value;
                                    break;
                                case "Notes":
                                    notes = value;
                                    break;
                                case "Style":
                                    style = value;
                                    break;
                                case "ElementID":
                                    elementId = value;
                                    break;
                                case "ElementType":
                                    elementType = value;
                                    break;
                                case "BinContent1":
                                    binContent1 = value;
                                    break;
                                case "BinContent2":
                                    binContent2 = value;
                                    reader.Read();
                                    process = false;
                                    break;
                            }
                        }
                    }
                }

                var binContent1Text = XMLHelper.ConvertFromBase64(binContent1, true);
                var binContent2Text = XMLHelper.ConvertFromBase64(binContent2, false);
 
                if (snapshotName == "t_object")
                {
                    //Populate BinContents1
                    var bc1List = new List<BinContent1>();
                    bc1List = BinContent1.DecodeBin(binContent1Text);


                    //Populate BinContents2
                    var bc2 = new BinContent2();
                    bc2.Decode(binContent2Text);

                    // build up audit record for insertion
                    var linqAudit = new Audit
                                        {
                                            Audit_header_id = headerId,
                                            Ea_object_type = snapshotName,
                                            Change_type = style,
                                            Object_name = bc2.levelName,
                                            Object_GUID = bc2.levelGUID,
                                            Object_type = bc2.levelLevelName,
                                            Audit_user = bc2.detailsUser,
                                            Audit_datetime = DateTime.Parse(bc2.detailsDateTime,
                                                                            System.Globalization.CultureInfo.
                                                                                CreateSpecificCulture(
                                                                                    "en-AU").
                                                                                DateTimeFormat)
                                        };

                    //Populate AuditDetails
                    List<AuditDetail> auditDetails = AuditDetail.AddValues(bc1List);
                    
                    foreach (AuditDetail auditDetail in auditDetails)
                    {
                        // build up audit details record for insertion
                        var linqAuditDetail = new Auditdetail
                                                  {
                                                      Property = auditDetail.property,
                                                      Old_value = auditDetail.old_value,
                                                      New_value = auditDetail.new_value
                                                  };

                        linqAudit.Auditdetail.Add(linqAuditDetail);
                    }

                    // submit the database inserts!
                    db.Audit.InsertOnSubmit(linqAudit);
                }
            }
            catch (Exception)
            {
                ok = false;
            }
            return ok;
        }

        #endregion

    }
}
