///////////////////////////////////////////////////////////
//  MaintainReleasesPresenter.cs
//  Implementation of the Class MaintainReleasesPresenter
//  Generated by Enterprise Architect
//  Created on:      12-Nov-2009 10:21:29
//  Original author: Colin Richardson
///////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Windows.Forms;
using EAAddIn.Applications;
using EAAddIn.Applications.DatabaseReleaseManager;
using Message=EAAddIn.Message;

public class MaintainReleasesPresenter
{
    public Release Model
    {
        get;
        set;
    }

    public IMaintainReleases View
    {
        get;
        set;
    }

    private readonly BindingSource messages = new BindingSource();
    private BindingList<Message> results = new BindingList<Message>();

    private readonly BindingSource releases = new BindingSource();
    private BindingList<Release> releasesList = new BindingList<Release>();
    public event EventHandler<EventArgs> ReleasesUpdated;
    public event EventHandler<EventArgs> ReleasesClosed;

    //List<Release> Releases { get; set;} 
    
 
    public MaintainReleasesPresenter(IMaintainReleases view, List<Release> myReleases)
    {
        Model = new Release();
        View = view;

        if (myReleases != null)
        {
            releasesList = new BindingList<Release>(myReleases);
        }

        releases.DataSource = releasesList;
        
        View.ReleasesBindingSource = releases;
        View.ReleasesDisplayMember = "FullName";
        View.ReleasesValueMember = "this";

        View.StreamsBindingSource.DataSource = ReleaseStream.List();
        messages.DataSource = results;
        View.MessagesBindingSource = messages;

        View.BindData();

        View.NewReleaseRequested += View_NewReleaseRequested;
        View.DeleteReleaseRequested += View_DeleteReleaseRequested;
        View.SaveReleaseRequested += View_SaveReleaseRequested;
        View.ReleaseSelected += View_ReleaseSelected;
        View.ReleaseFormClosed += View_ReleaseFormClosed;

        View.StreamsBindingSource.CancelEdit();

        View.Show();

        EditRelease();
    }

    void View_ReleaseFormClosed(object sender, EventArgs e)
    {
        if (ReleasesClosed != null)
        {
            ReleasesClosed(this, EventArgs.Empty);
        }
    }

    #region View Events

    void View_ReleaseSelected(object sender, System.EventArgs e)
    {
        var saveMessages = new List<Message>();


        UpdateModelFromView();

        if (Model.IsChangedFromOriginalValue())
        {
            if (View.ConfirmSave())
            {
                saveMessages = Model.Save();

                if (saveMessages.Count == 0)
                {
                    UpdateSelectedReleaseFromModel();
                }
            }
            else
            {
                Model.Reset();
            }
        }

        if (messages.Count == 0)
        {
            EditRelease();

        }
        else
        {
            View.RestorePreviousReleaseSelection();
        }

        UpdateMessages(saveMessages);
    }

    void View_NewReleaseRequested(object sender, System.EventArgs e)
    {
        Model = new Release();
        UpdateViewFromModel();
        View.SaveEnabled(true);
    }

    void View_SaveReleaseRequested(object sender, System.EventArgs e)
    {
        UpdateModelFromView();

        var editMode = Model.Mode;

        var saveMessages = Model.Save();

        if (saveMessages.Any(x => x.Type == "Error"))
        {
            UpdateViewFromModel();

            MessageBox.Show("Error saving release.", "Save Release",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
        else
        {
            MessageBox.Show(
                editMode == EditMode.Add ? "New release created successfully.  Please restart EA to use the created stereotypes." : "Release updated successfully.",
                "Save Release",
                MessageBoxButtons.OK, MessageBoxIcon.Information);
            UpdateViewFromModel();
            RefreshReleases();
        }

        UpdateMessages(saveMessages);
    }

    private void RefreshReleases()
    {
        releasesList = new BindingList<Release>(new Release().List());
        releases.DataSource = releasesList;
        View.ReleasesBindingSource = releases;
        View.ReleasesDisplayMember = "FullName";
        View.ReleasesValueMember = "this";
        View.BindData();

        if (ReleasesUpdated != null)
        {
            ReleasesUpdated(this, EventArgs.Empty);
        }
    }

    void View_DeleteReleaseRequested(object sender, System.EventArgs e)
    {
        var deleteMessages = Model.ValidateOkToDelete();


        if (deleteMessages.Count == 0)
        {
            if (
                MessageBox.Show("Are you sure that you want to delete this release?", "Delete Release",
                                MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                deleteMessages = Model.Delete();

                var errorMessages = from m in deleteMessages
                                    where m.Type == "Error"
                                    select m;

                if (errorMessages.Count() == 0)
                {
                    RefreshReleases();
                    MessageBox.Show("Release deleted successfully.", "Delete Release",
                                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Error deleting release.", "Delete Release",
                                    MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }
        }
        else
        {
            MessageBox.Show("Unable to delete release as stereotype is in use.", "Delete Release",
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        UpdateMessages(deleteMessages);
    }
 
    #endregion

    #region View / Model Synchronisation

    private void UpdateViewFromModel()
    {
        View.ReleaseName = Model.Name;
        View.ReleaseDate = Model.ReleaseDate;
        View.Stream = Model.Stream;

        Model.SaveOriginalValue();
    }

    private void UpdateModelFromView()
    {
        Model.Name = View.ReleaseName;
        Model.ReleaseDate = View.ReleaseDate;
        Model.Stream = View.Stream;

    }
    private void UpdateModelFromSelectedRelease()
    {
        if (View.SelectedRelease != null)
        {
            Model = (Release) View.SelectedRelease;
        }
    }
    private void UpdateSelectedReleaseFromModel()
    {
        View.SelectedRelease = Model;
    }

    #endregion

    private void EditRelease()
    {
        UpdateModelFromSelectedRelease();
        UpdateViewFromModel();

        Model.SaveOriginalValue();

        Model.Mode = Model.Used() ? EditMode.ReadOnly : EditMode.Update;

        if (Model.Mode == EditMode.ReadOnly)
        {
            View.SaveEnabled(false);
        }
        else
        {
            View.SaveEnabled(true);
        }

    }

    private void UpdateMessages(IList<Message> myMessages)
    {
        results = new BindingList<Message>(myMessages);
        messages.DataSource = results;
    }

    internal void ShowView()
    {
        View.BringToFront();
    }
}//end MaintainReleasesPresenter