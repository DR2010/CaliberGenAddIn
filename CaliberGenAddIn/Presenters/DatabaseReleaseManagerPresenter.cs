///////////////////////////////////////////////////////////
//  DatabaseReleaseManagerPresenter.cs
//  Implementation of the Class DatabaseReleaseManagerPresenter
//  Generated by Enterprise Architect
//  Created on:      11-Nov-2009 15:51:48
//  Original author: Colin Richardson
///////////////////////////////////////////////////////////


using System;
using System.ComponentModel;
using System.Data;
using System.Linq;
using System.Windows.Forms;
using EAAddIn.Applications.DatabaseReleaseManager;
using EAAddIn.Reports;
using EAAddIn.Windows;
using EAAddIn.Windows.Interfaces;
using DatabaseReleaseManager = EAAddIn.Applications.DatabaseReleaseManager.DatabaseReleaseManager;
using System.Collections.Generic;

namespace EAAddIn.Presenters
{
    public class DatabaseReleaseManagerPresenter
    {
        public DatabaseReleaseManager Model
        {
            get;
            set;
        }
        public IDatabaseReleaseManager View
        {
            get;
            set;
        }

        private readonly BindingSource messages = new BindingSource();
        private BindingList<Message> results = new BindingList<Message>();
        private MaintainReleasesPresenter maintainReleasePresenter;
        private PreviewActiveReportPresenter previewActiveReportPresenter;

        private List<Release> Releases
        {
            get;
            set;
        }
        /// 
        /// <param name="view"></param>
        public DatabaseReleaseManagerPresenter(IDatabaseReleaseManager view)
        {
            View = view;
            Model = new DatabaseReleaseManager();
            UpdateReleases();
            //View.ReleasesValueMember = "Name";

            view.MaintainReleasesRequested += view_MaintainReleasesRequested;
            view.CleanupEaDbRepositoryRequested += view_CleanupEaDbRepositoryRequested;
            view.CleanupEaRelease1Requested += view_CleanupEaRelease1Requested;
            view.CreateStereotypesRequested += view_CreateStereotypesRequested;
            view.DeleteStereotypesRequested += view_DeleteStereotypesRequested;
            view.ReleaseSelected += view_ReleaseSelected;
            view.PreviewMessagesReportRequested += view_PreviewMessagesReportRequested;
            view.ClearStereotypesRequested += view_ClearStereotypesRequested;
            view.LocateInBrowserRequested += view_LocateInBrowserRequested;
            view.FindStereotypeUsageRequested += view_FindStereotypeUsageRequested;

            RefreshMessages();
        }

        void view_FindStereotypeUsageRequested(object sender, MessagesEventArgs e)
        {
            var usageMessages = new Release { Name = ((Release)View.SelectedRelease).Name }.CheckReleaseStereotypeUsage();
            var informationMessages = new List<Message>();

            foreach (Message message in usageMessages)
            {
                informationMessages.Add(new Message() { Type = "Usage", Text = message.Text });
            }

            UpdateMessages(informationMessages);
        }

        void view_LocateInBrowserRequested(object sender, MessagesEventArgs e)
        {
            if (e.Tags != null && 
                e.Tags.Count == 1)
            {
                DatabaseReleaseManager.LocateInBrowser(e.Tags[0]);
            }
        }

        void view_ClearStereotypesRequested(object sender, MessagesEventArgs e)
        {
            if (e.Tags != null && 
                e.Tags.Count >= 1)
            {
                bool ok = true;

                foreach (var tag in e.Tags)
                {
                    var clearOK = Model.ClearStereotype(tag);

                    if (!clearOK)
                    {
                        ok = false;
                    }
                }

                if (ok)
                {
                    MessageBox.Show(e.Tags.Count == 1 ? "Stereotype cleared" : "Stereotypes cleared",
                                    "Clear Stereotypes", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                else
                {
                    MessageBox.Show("Error deleting " + (e.Tags.Count == 1 ? "stereotype." : "stereotypes."),
                                    "Clear Stereotypes", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        void view_PreviewMessagesReportRequested(object sender, System.EventArgs e)
        {
            var report = new MessagesReports();
            var source = new MessagesDataSet();

            foreach (var message in results)
            {
                source.Messages.AddMessagesRow(message.Type, message.Text);
            }

            report.DataSource = new DataView(source.Messages) {Sort = "Type, Description"};
            report.SetLicense("DEWR, DEWR, DD-ARN-20-D000496, cc4967777c49a3ff");

            var pos = report.Fields.Add("Header");

            report.Fields[pos].Value = "Printed: " + DateTime.Now.ToShortDateString()+ " " + DateTime.Now.ToShortTimeString() + Environment.NewLine +
                "Repository: " + (AddInRepository.Instance.IsRelease ? "Release1" : "DB Model")
            ;


            report.Run();
            var preview = new ActiveReportsPreviewForm(report);
            preview.Show();

        }

        void previewActiveReportPresenter_PreviewFormClosed(object sender, System.EventArgs e)
        {
            throw new System.NotImplementedException();
        }


        private void RefreshMessages()
        {
            messages.DataSource = results;
            View.MessagesBindingSource = messages;
            View.BindMessages();
        }

        void view_ReleaseSelected(object sender, System.EventArgs e)
        {
            results = new BindingList<Message>();
            RefreshMessages();
        }

        private void UpdateReleases()
        {
            Releases = new Release().List();

            View.ReleasesBindingSource.DataSource = Releases;
            View.ReleasesDisplayMember = "FullName";

            View.BindReleases();

        }

        #region View Events

        void view_CreateStereotypesRequested(object sender, System.EventArgs e)
        {
            var createMessages = new Stereotype().CreateDatabaseStereotypes(((Release)View.SelectedRelease).Name);

            UpdateMessages(createMessages);

            var errorMessages = from m in createMessages
                                where m.Type == "Error"
                                select m;

            var informationMessages = from m in createMessages
                                      where m.Type == "Information"
                                      select m;


            if (errorMessages.Count() == 0 && informationMessages.Count() > 0)
            {
                MessageBox.Show("You must now manually restart Enterprise Architect for these changes to take affect.",
                                "Stereotypes Changed", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
        }
        void view_DeleteStereotypesRequested(object sender, System.EventArgs e)
        {
            var deleteMessages = new Stereotype().DeleteDatabaseStereotypes(((Release)View.SelectedRelease).Name);

            UpdateMessages(deleteMessages);

            var errorMessages = from m in deleteMessages
                                where m.Type == "Error"
                                select m;


            if (errorMessages.Count() == 0)
            {
                MessageBox.Show("You must now manually restart Enterprise Architect for these changes to take affect.",
                                "Stereotypes Changed", MessageBoxButtons.OK, MessageBoxIcon.Information);

            }
            else
            {
                MessageBox.Show("Error deleting stereotypes.",
                                "Delete Stereotypes", MessageBoxButtons.OK, MessageBoxIcon.Error);

            }
        }


        void view_CleanupEaRelease1Requested(object sender, System.EventArgs e)
        {
            if (MessageBox.Show("Are you sure that you want to cleanup the " +
                                ((Release)View.SelectedRelease).FullName +
                                " release?", "Cleanup Release",
                                MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {

               List<Message> cleanupMessages = DatabaseReleaseManager.CleanupRelease((Release)View.SelectedRelease);

                if (cleanupMessages.Any(x => x.Type == MessageType.Question))
                {
                    if (MessageBox.Show(cleanupMessages.Find(x => x.Type == MessageType.Question).Text, "Cleanup Release", MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
                    {
                        cleanupMessages = DatabaseReleaseManager.CleanupReleaseConfirmed((Release)View.SelectedRelease);
                    }
                }
                UpdateMessages(cleanupMessages);
            }

        }

        void view_CleanupEaDbRepositoryRequested(object sender, System.EventArgs e)
        {
            if (MessageBox.Show("Are you sure that you want to cleanup the " +
                                ((Release) View.SelectedRelease).FullName +
                                " data model release?" + Environment.NewLine + Environment.NewLine +
                                "This will remove future steretypes.", "Cleanup DB Release",
                                MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                List<Message> cleanupMessages = Model.CleanupDBRelease((Release) View.SelectedRelease);

                if (cleanupMessages.Any(x => x.Type == MessageType.Question))
                {
                    if (
                        MessageBox.Show(cleanupMessages.Find(x => x.Type == MessageType.Question).Text,
                                        "Cleanup Database Package", MessageBoxButtons.YesNo, MessageBoxIcon.Question) ==
                        DialogResult.Yes)
                    {
                        cleanupMessages = Model.CleanupDBReleaseConfirmed((Release) View.SelectedRelease);
                    }
                }
                UpdateMessages(cleanupMessages);
            }
        }

        void view_MaintainReleasesRequested(object sender, System.EventArgs e)
        {
            if (maintainReleasePresenter == null)
            {
                maintainReleasePresenter = new MaintainReleasesPresenter(new MaintainReleases(), Releases);
                maintainReleasePresenter.ReleasesUpdated += new System.EventHandler<System.EventArgs>(maintainReleasePresenter_ReleasesUpdated);
                maintainReleasePresenter.ReleasesClosed += new System.EventHandler<System.EventArgs>(maintainReleasePresenter_ReleasesClosed);
            }
            else
            {
                maintainReleasePresenter.ShowView();
            }

        }

        void previewActiveReportPresenter_ReleasesClosed(object sender, System.EventArgs e)
        {
            previewActiveReportPresenter.PreviewFormClosed -= previewActiveReportPresenter_PreviewFormClosed;
            previewActiveReportPresenter = null;
        }

        void maintainReleasePresenter_ReleasesClosed(object sender, System.EventArgs e)
        {
            maintainReleasePresenter.ReleasesUpdated -= maintainReleasePresenter_ReleasesUpdated;
            maintainReleasePresenter.ReleasesClosed -= maintainReleasePresenter_ReleasesClosed;
            maintainReleasePresenter = null;
        }

        void maintainReleasePresenter_ReleasesUpdated(object sender, System.EventArgs e)
        {
            UpdateReleases();
        }

        #endregion

        private void UpdateMessages(IList<Message> myMessages)
        {
            results = new BindingList<Message>(myMessages);
            messages.DataSource = results;
        }
    }//end DatabaseReleaseManagerPresenter

}//end namespace Presenters